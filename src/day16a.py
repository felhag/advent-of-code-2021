input
# input = '38006F45291200'

# input = '8A004A801A8002F478'
# input = '620080001611562C8802118E34'
# input = 'C0015000016115A2E0802F182340'
# input = 'A0016C880162017C3686B18A3D4780'
binary = ''.join([format(int(char, 16), 'b').zfill(4) for char in input])
version_count = 0
print(f'binary: {binary}')


def chop(length):
    global binary
    result = binary[0:length]
    binary = binary[length:]
    return result


def chop_binary(length):
    return int(chop(length), 2)


def parse_literal():
    result = []
    chopped = 0
    while binary[0] == '1':
        result.append(chop(5)[1:])
        chopped = chopped + 5

    result.append(chop(5)[1:])
    return int(''.join(result), 2), chopped + 5


def parse_packet():
    global version_count
    packet = chop_binary(3)
    typeid = chop_binary(3)
    version_count = version_count + packet

    match typeid:
        case 4:
            # literal
            # return [parse_literal()]
            return parse_literal()[1] + 6
        case _:
            length_id = chop(1)
            length_based = length_id == '0'
            length = 15 if length_based else 11
            has_next = chop_binary(length)
            total = length
            while has_next > 0:
                chopped = parse_packet()
                total = total + chopped
                has_next = has_next - (chopped if length_based else 1)
            print(f'Total count: {total}')
            return total + 7


parse_packet()
print(f'Final result: {version_count}')
